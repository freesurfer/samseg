name: MacOS Build

on:
  push:
    branches: [ dev, itk_update ]
    tags:
      - v*
  pull_request:
    branches: [ dev ]
  workflow_dispatch:

jobs:
  example_matrix:
    strategy:
      matrix:
        os: [macos-latest, macos-12]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up python versions ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Checkout submodules
      run: | 
        git submodule init
        git submodule update

    - name: Build zlib
      run: |
         git clone https://github.com/madler/zlib.git
         mkdir zlib-build
         cd zlib-build
         cmake ../zlib -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../zlib-install
         make install
         cd ..

    - name: Build ITK
      run: |
        mkdir ITK-build
        cd ITK-build
        cmake \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TESTING=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../ITK-install \
            ../ITK
        make install
        cd ..

    - name: Detect if arm and set build variables
      if: runner.arch == 'ARM64' || runner.arch == 'ARM64'
      run: |
        APPLE_ARM64=ON
        MACOSX_DEPLOYMENT_TARGET="14.0"
        _PYTHON_HOST_PLATFORM="macosx-14.0-arm64"
        ARCHFLAGS="-arch arm64"

    - name: Detect if x64 and set build variables
      if: runner.arch == 'x64'
      run: |
        APPLE_ARM64=OFF
        MACOSX_DEPLOYMENT_TARGET="13.0"
        _PYTHON_HOST_PLATFORM="macosx-13.0-x86_64"
        ARCHFLAGS="-arch x86_64"

    - name: Build samseg for python version ${{ matrix.python-version }} and test
      run: |
        python -m pip wheel . -w ./dist --no-deps
        rm samseg/gems/*.so
      env:
        ITK_DIR: ITK-install
        ZLIB_INCLUDE_DIR: zlib-install/include
        ZLIB_LIBRARY: zlib-install/lib/libz.a

    - name: Install the wheel and test dependencies
      run: |
        python -m pip install samseg -f ./dist
        python -m pip install pytest
        python -m pip install tensorflow
        python -m pytest samseg/tests

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-wheels
        path: dist/*.whl

    - name: Upload to PyPI
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags') }}
      run: |
        $PYTHON -m pip install twine
        $PYTHON -m twine upload dist/*.whl -u __token__ -p "$PASSWORD"
      env:
        PASSWORD: ${{ secrets.PYPI_TOKEN }}
        PYTHON: /Library/Frameworks/Python.framework/Versions/3.8/bin/python3
