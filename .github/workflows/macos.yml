name: MacOS Build

on:
  push:
    branches: [ dev, itk_update ]
    tags:
      - v*
  pull_request:
    branches: [ dev ]
  workflow_dispatch:

jobs:
  build:
    name: Build and upload artefact
    strategy:
    max-parallel: 1
    matrix:
      os: [macos-latest, macos-13]
      python-version: ["3.8", "3.9", "3.10", "3.11"]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up python versions ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Detect if arm and set build variables
      if: runner.arch == 'ARM64' || runner.arch == 'ARM64'
      run: |
        APPLE_ARM64=ON
        echo "APPLE_ARM64=${APPLE_ARM64}" >> $GITHUB_ENV
        MACOSX_DEPLOYMENT_TARGET="14.0"
        echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}" >> $GITHUB_ENV
        _PYTHON_HOST_PLATFORM="macosx-14.0-arm64"
        echo "_PYTHON_HOST_PLATFORM=${_PYTHON_HOST_PLATFORM}" >> $GITHUB_ENV
        ARCHFLAGS="-arch arm64"
        echo "ARCHFLAGS=${ARCHFLAGS=}" >> $GITHUB_ENV
        PYTHON_VERSION_STR=$(python -c "import sys;print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
        echo "PYTHON_VERSION_STR=${PYTHON_VERSION_STR}" >> $GITHUB_ENV

    - name: Detect if x64 and set build variables
      if: runner.arch == 'x64'
      run: |
        APPLE_ARM64=OFF
        echo "APPLE_ARM64=${APPLE_ARM64}" >> $GITHUB_ENV
        MACOSX_DEPLOYMENT_TARGET="13.0"
        echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}" >> $GITHUB_ENV
        _PYTHON_HOST_PLATFORM="macosx-13.0-x86_64"
        echo "_PYTHON_HOST_PLATFORM=${_PYTHON_HOST_PLATFORM}" >> $GITHUB_ENV
        ARCHFLAGS="-arch x86_64"
        echo "ARCHFLAGS=${ARCHFLAGS=}" >> $GITHUB_ENV
        PYTHON_VERSION_STR=$(python -c "import sys;print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
        echo "PYTHON_VERSION_STR=${PYTHON_VERSION_STR}" >> $GITHUB_ENV

    - name: Checkout submodules
      run: | 
        git submodule init
        git submodule update

    - name: Build zlib
      run: |
         git clone https://github.com/madler/zlib.git
         mkdir zlib-build-${PYTHON_VERSION_STR}-${_PYTHON_HOST_PLATFORM}
         cd zlib-build-${PYTHON_VERSION_STR}-${_PYTHON_HOST_PLATFORM}
         cmake ../zlib -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../zlib-install-${PYTHON_VERSION_STR}-${_PYTHON_HOST_PLATFORM}
         make install
         cd ..

    - name: Build ITK
      run: |
        mkdir ITK-build-${PYTHON_VERSION_STR}-${_PYTHON_HOST_PLATFORM}
        cd ITK-build-${PYTHON_VERSION_STR}-${_PYTHON_HOST_PLATFORM}
        cmake \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TESTING=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../ITK-install-${PYTHON_VERSION_STR}-${_PYTHON_HOST_PLATFORM} \
            ../ITK
        make install
        cd ..

    - name: Build samseg for python version ${{ matrix.python-version }} and test
      run: |
        python -m pip wheel . -w ./dist-${PYTHON_VERSION_STR}-${_PYTHON_HOST_PLATFORM} --no-deps --verbose
      env:
        ITK_DIR: ITK-install-${{ env.PYTHON_VERSION_STR }}-${{ env._PYTHON_HOST_PLATFORM }}
        ZLIB_INCLUDE_DIR: zlib-install-${{ env.PYTHON_VERSION_STR }}-${{ env._PYTHON_HOST_PLATFORM }}/include
        ZLIB_LIBRARY: zlib-install-${{ env.PYTHON_VERSION_STR }}-${{ env._PYTHON_HOST_PLATFORM }}/lib/libz.a
        APPLE_ARM64: ${{ env.APPLE_ARM64 }}
        MACOSX_DEPLOYMENT_TARGET: ${{ env.MACOSX_DEPLOYMENT_TARGET }}
        _PYTHON_HOST_PLATFORM: ${{ env._PYTHON_HOST_PLATFORM }}
        ARCHFLAGS: ${{ env.ARCHFLAGS }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-wheels
        path: dist-${{ env.PYTHON_VERSION_STR }}-${{ env._PYTHON_HOST_PLATFORM }}/*.whl

  test:
    name: Test the wheel
    needs: build
    strategy:
      max-parallel: 1
      matrix:
        os: [macos-latest, macos-13]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-wheels
          path: ${{ github.workspace }}

    - name: Python - set up ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install the wheel and test dependencies
      run: |
        python -m pip install samseg*.whl
        python -m pip install pytest
        python -m pip install tensorflow
        pytest tests -v

  publish:
    name: Publish the wheel
    needs: test
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags')
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: macos-wheels
        path: ${{ github.workspace }}
    - name: Python - set up 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Upload to PyPI
      run: |
        python -m pip install twine
        python -m twine upload *.whl -u __token__ -p "$PASSWORD"
      env:
        PASSWORD: ${{ secrets.PYPI_TOKEN }}
